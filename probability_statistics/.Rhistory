?tibble
?map2_dbl
library(purrr)
?map2_dbl
?weighted.mean
library(stringr)
?str_replace
?arrange
library(dplyr)
?arrange
library(dplyr)
?pull
?filter
?map_dbl
?%in%
?filter
setwd("~/GitHub/DQ-Rpracticeproject/probability_statistics")
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
coders <- data.frame(read_csv("coders.csv"))
library(knitr)
library(pander)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(DT)
library(stringr)
library(ggplot2)
options(stringsAsFactors = FALSE)
coders <- data.frame(read_csv("coders.csv"))
View(coders)
coders <- data.frame(read_csv("coders.csv"))
dim(coders)
colnames(coders)
for (i in colnames(coders)) {
print(class(coders[[i]]))
}
View(coders)
coders <- data.frame(read_csv("coders.csv"))
dim(coders)
colnames(coders)
for (i in colnames(coders)) {
print(class(coders[[i]]))
}
View(coders)
freq_dist_location <- coders %>%
group_by(CountryLive) %>%
summarize(Freq=n())
View(freq_dist_location)
freq_dist_location <- coders %>%
group_by(CountryLive) %>%
summarize(Freq=n(), na.rm=TRUE) %>%
arrange(desc(Freq))
View(freq_dist_location)
freq_dist_location <- coders %>%
group_by(CountryLive) %>%
summarize(Freq=n()) %>%
arrange(desc(Freq))
View(freq_dist_location)
View(coders)
head(freq_dist_location)
freq_dist_money <- coders %>%
group_by(MoneyForLearning) %>%
summarize(Freq=n()) %>%
arrange(desc(Freq))
head(freq_dist_money)
freq_dist_money <- coders %>%
group_by(MoneyForLearning) %>%
summarize(Freq=n()) %>%
arrange(desc(MoneyForLearning))
head(freq_dist_money)
freq_dist_money <- coders %>%
group_by(MoneyForLearning) %>%
summarize(Freq=n()) %>%
arrange(desc(Freq))
head(freq_dist_location)
freq_dist_money <- coders %>%
group_by(MoneyForLearning) %>%
summarize(Freq=n()) %>%
arrange(desc(Freq))
head(freq_dist_money)
View(coders)
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
group_by(money_per_month) %>%
summarize(mean=mean(money_per_month)) %>%
arrange(desc(mean))
head(mean_money)
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
group_by(money_per_month) %>%
summarize(mean=mean(money_per_month)) %>%
arrange(desc(mean))
print(mean_money)
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
group_by(money_per_month) %>%
summarize(mean=mean(money_per_month)) %>%
arrange(desc(mean))
head(mean_money)
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning / MonthsProgramming) %>%
group_by(money_per_month) %>%
summarize(mean=mean(money_per_month)) %>%
arrange(desc(mean))
head(mean_money)
freq_dist_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
group_by(money_per_month) %>%
summarize(Freq=n()) %>%
arrange(desc(Freq))
head(freq_dist_money)
freq_dist_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
group_by(money_per_month) %>%
summarize(Freq=n()) %>%
arrange(desc(money_per_month))
head(freq_dist_money)
max(coders$MoneyForLearning)
max(coders$MoneyForLearning, na.rm=TRUE)
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
group_by(money_per_month) %>%
summarize(mean = mean(money_per_month)) %>%
arrange(desc(mean))
head(mean_money)
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
filter(CountryLive == "United States of America" | "India" | "Canada" | "United Kingdom") %>%
filter(!is.na(money_per_month))
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
filter(CountryLive == "United States of America" | "India" | "Canada" | "United Kingdom") %>%
filter(!is.na(money_per_month)) %>%
group_by(CountryLive) %>%
summarize(mean = mean(money_per_month)) %>%
arrange(desc(mean))
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
filter(CountryLive == "United States of America" | "India" | "Canada" | "United Kingdom") %>%
filter(is.na(money_per_month)) %>%
group_by(CountryLive) %>%
summarize(mean = mean(money_per_month)) %>%
arrange(desc(mean))
mean_money <- coders %>%
filter(!is.na(MoneyForLearning))
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
filter(CountryLive == "United States of America" | "India" | "Canada" | "United Kingdom") %>%
group_by(CountryLive) %>%
summarize(mean = mean(money_per_month)) %>%
arrange(desc(mean))
mean_money <- coders %>%
filter(!is.na(MoneyForLearning))
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
filter(CountryLive == "United States of America" | "India" | "Canada" | "United Kingdom") %>%
group_by(CountryLive) %>%
summarize(mean = mean(money_per_month)) %>%
arrange(desc(mean))
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
filter(CountryLive == "United States of America" | "India" | "Canada" | "United Kingdom") %>%
filter(!(is.na(money_per_month))) %>%
group_by(CountryLive) %>%
summarize(mean = mean(money_per_month)) %>%
arrange(desc(mean))
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
filter(CountryLive == "United States of America" | "India" | "Canada" | "United Kingdom") %>%
group_by(CountryLive) %>%
summarize(mean = mean(money_per_month)) %>%
arrange(desc(mean))
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
filter(CountryLive == "United States of America" | CountryLive == "India" | CountryLive == "Canada" | CountryLive == "United Kingdom") %>%
group_by(CountryLive) %>%
summarize(mean = mean(money_per_month)) %>%
arrange(desc(mean))
head(mean_money)
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
filter(!(is.na(money_per_month))) %>%
filter(CountryLive == "United States of America" | CountryLive == "India" | CountryLive == "Canada" | CountryLive == "United Kingdom") %>%
group_by(CountryLive) %>%
summarize(mean = mean(money_per_month)) %>%
arrange(desc(mean))
head(mean_money)
mean_money <- coders %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
filter(!(is.na(money_per_month))) %>%
filter(!(money_per_month == Inf)) %>%
filter(CountryLive == "United States of America" | CountryLive == "India" | CountryLive == "Canada" | CountryLive == "United Kingdom") %>%
group_by(CountryLive) %>%
summarize(mean = mean(money_per_month)) %>%
arrange(desc(mean))
head(mean_money)
categories <- coders %>%
group_by(JobRoleInterest) %>%
summarize(freq=n()*100/nrow(coders)) %>%
arrange(desc(freq))
coders %>%
group_by(JobRoleInterest) %>%
summarize(freq=n()*100/nrow(coders)) %>%
arrange(desc(freq))
split <- coders %>%
select(JobRoleInterest) %>%
tidyr::drop_na() %>%
rowwise %>%
mutate(opts = length(stringr::str_split(JobRoleInterest, ",")[[1]]))
n_of_options <- split %>%
ungroup() %>%
group_by(opts) %>%
summarize(freq=n()*100/nrow(split))
n_of_options
View(split)
split <- coders %>%
select(JobRoleInterest) %>%
tidyr::drop_na() %>%
rowwise %>%
mutate(opts = length(stringr::str_split(JobRoleInterest, ",")[[1]]))
print(split)
n_of_options <- split %>%
ungroup() %>%
group_by(opts) %>%
summarize(freq=n()*100/nrow(split))
n_of_options
web_or_mobile <- stringr::str_detect(coders$JobRoleInterest, "Web Developer|Mobile Developer")
freq_table <- table(web_or_mobile)
freq_table <- freq_table * 100 / sum(freq_table)
freq_table
# Frequency table
web_or_mobile <- stringr::str_detect(coders$JobRoleInterest, "Web Developer|Mobile Developer")
freq_table <- table(web_or_mobile)
freq_table <- freq_table * 100 / sum(freq_table)
freq_table
#Graph for frequency table
df <- tibble::tibble(x=c("Other Subject", "Web or Mobile Development"),
y=freq_table)
ggplot(data=df, aes(x=x, y=y, fill=x)) +
geom_histogram(stat="identity")
freq_dist_location <- coders %>%
tidyr::drop_na(JobRoleInterest) %>%
group_by(CountryLive) %>%
summarize(Freq=n(), Percentage = n()*100/nrow(coders)) %>%
arrange(desc(Percentage))
View(freq_dist_location)
freq_dist_location <- coders %>%
tidyr::drop_na(JobRoleInterest)
freq_dist_location <- freq_dist_location %>%
group_by(CountryLive) %>%
summarize(Freq=n(), Percentage = n()*100/nrow(freq_dist_location)) %>%
arrange(desc(Percentage))
View(freq_dist_location)
?pull
mean_money <- coders %>%
mutate(MonthsProgramming = replace(MonthsProgramming, MonthsProgramming == 0, 1)) %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming) %>%
tidyr::drop_na(money_per_month) %>%
tidyr::drop_na(CountryLive) %>%
summarize(freq=n()) %>%
arrange(desc(freq))
head(mean_money)
# Replace 0s with 1s to avoid division by 0
mean_money <- coders %>%
mutate(MonthsProgramming = replace(MonthsProgramming,  MonthsProgramming == 0, 1) )
# New column for the amount of money each student spends each month
mean_money <- mean_moeny %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming)
# Replace 0s with 1s to avoid division by 0
mean_money <- coders %>%
mutate(MonthsProgramming = replace(MonthsProgramming,  MonthsProgramming == 0, 1) )
# New column for the amount of money each student spends each month
mean_money <- mean_money %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming)
#Determine number of NAs
mean_money %>%
summarise(na_count = sum(is.na(money_per_month)) ) %>%
pull(na_count)
#Drop NAs
mean_money <- mean_money %>% tidyr::drop_na(money_per_month)
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library(knitr)
library(pander)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(DT)
library(stringr)
library(ggplot2)
options(stringsAsFactors = FALSE)
coders <- data.frame(read_csv("coders.csv"))
dim(coders)
colnames(coders)
for (i in colnames(coders)) {
print(class(coders[[i]]))
}
coders %>%
group_by(JobRoleInterest) %>%
summarize(freq=n()*100/nrow(coders)) %>%
arrange(desc(freq))
# split each string in the 'JobRoleInterest' column
split <- coders %>%
select(JobRoleInterest) %>%
tidyr::drop_na() %>%
rowwise %>%
mutate(opts = length(stringr::str_split(JobRoleInterest, ",")[[1]]))
# Frequency table for the var describing the number of options
n_of_options <- split %>%
ungroup() %>%
group_by(opts) %>%
summarize(freq=n()*100/nrow(split))
n_of_options
# Frequency table
web_or_mobile <- stringr::str_detect(coders$JobRoleInterest, "Web Developer|Mobile Developer")
freq_table <- table(web_or_mobile)
freq_table <- freq_table * 100 / sum(freq_table)
freq_table
#Graph for frequency table
df <- tibble::tibble(x=c("Other Subject", "Web or Mobile Development"),
y=freq_table)
ggplot(data=df, aes(x=x, y=y, fill=x)) +
geom_histogram(stat="identity")
# Replace 0s with 1s to avoid division by 0
mean_money <- coders %>%
mutate(MonthsProgramming = replace(MonthsProgramming,  MonthsProgramming == 0, 1) )
# New column for the amount of money each student spends each month
mean_money <- mean_money %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming)
mean_money %>%
summarize(na_count=sum(is.na(money_per_month))) %>%
pull(na_count)
#Keep only nonNA rows
mean_money <- mean_money %>%
tidyr::drop_na(money_per_month)
#Remove NAs in CountryLive
mean_money <- mean_money %>%
tidyr::drop_na(CoutnryLive)
# Replace 0s with 1s to avoid division by 0
mean_money <- coders %>%
mutate(MonthsProgramming = replace(MonthsProgramming,  MonthsProgramming == 0, 1) )
# New column for the amount of money each student spends each month
mean_money <- mean_money %>%
mutate(money_per_month = MoneyForLearning/MonthsProgramming)
mean_money %>%
summarize(na_count=sum(is.na(money_per_month))) %>%
pull(na_count)
#Keep only nonNA rows
mean_money <- mean_money %>%
tidyr::drop_na(money_per_month)
#Remove NAs in CountryLive
mean_money <- mean_money %>%
tidyr::drop_na(CountryLive)
#Frequency table to check if we still have enough data
mean_money %>%
group_by(CountryLive) %>%
summarize(freq=n()) %>%
arrange(desc(freq)) %>%
head()
countries_mean <- mean_money %>%
filter(CountryLive == 'United States of America' | CountryLive == 'India' | CountryLive == 'United Kingdom' | CountryLive == 'Canada') %>%
group_by(CountryLive) %>%
summarize(mean=mean(money_per_month)) %>%
arrange(desc(mean))
countries_mean
#Isolate only the countries of interest, add index column
only_4 <- mean_money %>%
filter(CountryLive == 'United States of America' | CountryLive == 'India' | CountryLive == 'United Kingdom'|CountryLive == 'Canada') %>%
mutate(index = row_number())
View(only_4)
#Isolate only the countries of interest, add index column
only_4 <- mean_money %>%
filter(CountryLive == 'United States of America' | CountryLive == 'India' | CountryLive == 'United Kingdom'|CountryLive == 'Canada') %>%
mutate(index = row_number())
#Box plots to visualize distributions
ggplot( data = only_4, aes(x = CountryLive, y = money_per_month)) +
geom_boxplot() +
ggtitle("Money Spent Per Month Per Country\n(Distributions)") +
xlab("Country") +
ylab("Money per month (US dollars)") +
theme_bw()
mean_money <- mean_money %>%
filter(money_per_month < 20000)
countries_mean <- mean_money %>%
filter(CountryLive=='United States of America' | CountryLive == 'India' | CountryLive == 'United Kingdom'|CountryLive == 'Canada') %>%
group_by(CountryLive) %>%
sumamrize(mean=mean(money_per_month)) %>%
arrange(desc(mean))
mean_money <- mean_money %>%
filter(money_per_month < 20000)
countries_mean <- mean_money %>%
filter(CountryLive=='United States of America' | CountryLive == 'India' | CountryLive == 'United Kingdom'|CountryLive == 'Canada') %>%
group_by(CountryLive) %>%
summarize(mean=mean(money_per_month)) %>%
arrange(desc(mean))
countries_mean
mean_money <- mean_money %>%
filter(money_per_month < 20000)
# Mean sum of money spent by students each month
countries_mean <- mean_money %>%
filter(CountryLive=='United States of America' | CountryLive == 'India' | CountryLive == 'United Kingdom'|CountryLive == 'Canada') %>%
group_by(CountryLive) %>%
summarize(mean=mean(money_per_month)) %>%
arrange(desc(mean))
countries_mean
# Isolate only the countries of interest
only_4  <-  fcc_good %>%
filter(CountryLive == 'United States of America' | CountryLive == 'India' | CountryLive == 'United Kingdom'|CountryLive == 'Canada') %>%
mutate(index = row_number())
# Isolate only the countries of interest
only_4  <-  fcc_good %>%
filter(CountryLive == 'United States of America' | CountryLive == 'India' | CountryLive == 'United Kingdom'|CountryLive == 'Canada') %>%
mutate(index = row_number())
# Isolate only the countries of interest
only_4  <-  mean_money %>%
filter(CountryLive == 'United States of America' | CountryLive == 'India' | CountryLive == 'United Kingdom'|CountryLive == 'Canada') %>%
mutate(index = row_number())
# Box plots to visualize distributions
ggplot( data = only_4, aes(x = CountryLive, y = money_per_month)) +
geom_boxplot() +
ggtitle("Money Spent Per Month Per Country\n(Distributions)") +
xlab("Country") +
ylab("Money per month (US dollars)") +
theme_bw()
#Inspect India outliers
india_outliers <- only_4 %>%
filter(CountryLive == 'India' &
money_per_month >= 2500)
india_outliers
only_4 <- only_4 %>%
filter(!(index %in% india_outliers$index))
#examine US extreme outliers
us_outliers = only_4 %>%
filter(CountryLive == 'United States of America' &
money_per_month >= 6000)
#examine US extreme outliers
us_outliers = only_4 %>%
filter(CountryLive == 'United States of America' &
money_per_month >= 6000)
us_outliers
#examine US extreme outliers
us_outliers = only_4 %>%
filter(CountryLive == 'United States of America' &
money_per_month >= 6000)
us_outliers
only_4 <- only_4 %>%
filter(!(index %in% us_outliers$index))
?%in%
#Remove respondents who didn't attend bootcamp
no_bootcamp = only_4 %>%
filter(CountryLive == 'United States of America' &
money_per_monty >= 6000 &
AttendedBootcamp == 0)
#Remove respondents who didn't attend bootcamp
no_bootcamp = only_4 %>%
filter(CountryLive == 'United States of America' &
money_per_month >= 6000 &
AttendedBootcamp == 0)
only_4 <- only_4 %>%
filter(!(index %in% no_bootcamp$index))
# Remove the respondents that had been programming for less than 3 months
less_than_3_months = only_4 %>%
filter(CountryLive == 'United States of America' &
money_per_month >= 6000 &
MonthsProgramming <= 3)
only_4  <-  only_4 %>%
filter(!(index %in% less_than_3_months$index))
#Examine the extreme outliers for Canada
canada_outliers = only_4 %>%
filter(CountryLive == 'Canada' &
money_per_month >= 4500 &
MonthsProgramming <= 3)
canada_outliers
#Mean sum of money spent by students each month, no outliers
countries_mean = only_4 %>%
group_by(CountryLive) %>%
summarize(mean=mean(money_per_month)) %>%
arrange(desc(mean))
countries_mean
# Frequency table for the 'CountryLive' column
only_4 %>%
group_by(CountryLive) %>%
summarize(freq=n()*100/nrow(only_4)) %>%
arrange(desc(freq)) %>%
head()
#Frequency table check if enough data
only_4 %>%
group_by(CountryLive) %>%
summarize(freq=n()) %>%
arrange(desc(freq)) %>%
head()
