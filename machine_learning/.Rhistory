north.times_by_month.2 = V16,
north.times_by_month.3 = V17,
north.times_by_month.4 = V18,
north.times_by_month.5 = V19,
north.times_by_month.6 = V20,
north.times_by_month.7 = V21,
north.times_by_month.8 = V22,
north.times_by_month.9 = V23,
north.times_by_month.10 = V24,
north.times_by_month.11 = V25,
north.times_by_month.12 = V26,
north.months = V27,
south.times_by_month.1 = V28,
south.times_by_month.2 = V29,
south.times_by_month.3 = V30,
south.times_by_month.4 = V31,
south.times_by_month.5 = V32,
south.times_by_month.6 = V33,
south.times_by_month.7 = V34,
south.times_by_month.8 = V35,
south.times_by_month.9 = V36,
south.times_by_month.10 = V37,
south.times_by_month.11 = V38,
south.times_by_month.12 = V39,
south.months = V40
)
View(bug_list)
bug_list$catchphrases
bug_list$catchphrases[23] <- "I caught an evening cicada! Better than an odding cicada..."
bug_list$catchphrases[27] <- "I caught a giant cicada! I guess it's PRETTY big..."
bug_list$catchphrases[63] <- "I caught a robust cicada! It DOES seem pretty lively!"
bug_list$catchphrases[75] <- "I caught a walker cicada! Pffft... I walk all the time and no one calls me \"Walker <Player>.\""
bug_list$north$availability_array <- NULL
bug_list$north$months_array <- NULL
bug_list$south$availability_array <- NULL
bug_list$south$months_array <- NULL
u_bug_list <- unlist(bug_list)
bug_df <- as.data.frame(matrix(u_bug_list, nrow=80))
View(bug_df)
bug_df <- bug_df %>%
rename(
name = V1,
url = V2,
number = V3,
image_url = V4,
render_url = V5,
location = V6,
rarity = V7,
total_catch = V8,
sell_nook = V9,
sell_cj = V10,
tank_width = V11,
tank_length = V12,
catchphrases = V13,
north.times_by_month.1 = V14,
north.times_by_month.2 = V15,
north.times_by_month.3 = V16,
north.times_by_month.4 = V17,
north.times_by_month.5 = V18,
north.times_by_month.6 = V19,
north.times_by_month.7 = V20,
north.times_by_month.8 = V21,
north.times_by_month.9 = V22,
north.times_by_month.10 = V23,
north.times_by_month.11 = V24,
north.times_by_month.12 = V25,
north.months = V26,
south.times_by_month.1 = V27,
south.times_by_month.2 = V28,
south.times_by_month.3 = V29,
south.times_by_month.4 = V30,
south.times_by_month.5 = V31,
south.times_by_month.6 = V32,
south.times_by_month.7 = V33,
south.times_by_month.8 = V34,
south.times_by_month.9 = V35,
south.times_by_month.10 = V36,
south.times_by_month.11 = V37,
south.times_by_month.12 = V38,
south.months = V39
)
View(seacreature_list)
seacreature_list$catchphrases
View(seacreature_df)
seacreature_list$north$availability_array <- NULL
seacreature_list$north$months_array <- NULL
seacreature_list$south$availability_array <- NULL
seacreature_list$south$months_array <- NULL
u_seacreature_list <- unlist(seacreature_list)
seacreature_df <- as.data.frame(matrix(u_seacreature_list, nrow=40))
View(seacreature_df)
seacreature_df <- seacreature_df %>%
rename(
name = V1,
url = V2,
number = V3,
image_url = V4,
render_url = V5,
shadow_size = V6,
shadow_movement = V7,
rarity = V8,
total_catch = V9,
sell_nook = V10,
tank_width = V11,
tank_length = V12,
catchphrases = V13,
north.times_by_month.1 = V14,
north.times_by_month.2 = V15,
north.times_by_month.3 = V16,
north.times_by_month.4 = V17,
north.times_by_month.5 = V18,
north.times_by_month.6 = V19,
north.times_by_month.7 = V20,
north.times_by_month.8 = V21,
north.times_by_month.9 = V22,
north.times_by_month.10 = V23,
north.times_by_month.11 = V24,
north.times_by_month.12 = V25,
north.months = V26,
south.times_by_month.1 = V27,
south.times_by_month.2 = V28,
south.times_by_month.3 = V29,
south.times_by_month.4 = V30,
south.times_by_month.5 = V31,
south.times_by_month.6 = V32,
south.times_by_month.7 = V33,
south.times_by_month.8 = V34,
south.times_by_month.9 = V35,
south.times_by_month.10 = V36,
south.times_by_month.11 = V37,
south.times_by_month.12 = V38,
south.months = V39
)
View(seacreature_df)
View(furniture_list)
View(furniture_list[[29]][[16]])
View(furniture_list[[29]][[1]])
View(furniture_list)
u_furniture_list <- unlist(furniture_list)
furniture_df <- as.data.frame(matrix(u_furniture_list, nrow=1199, ncol=40))
View(furniture_df)
View(furniture_list[[30]][[1]])
str(furniture_list)
write.csv(fish_df,"D:\\User\\Documents\\GitHub\\Animal_Crossing\\Fish.csv")
write.csv(bug_df,"D:\\User\\Documents\\GitHub\\Animal_Crossing\\Bugs.csv")
write.csv(seacreature_df,"D:\\User\\Documents\\GitHub\\Animal_Crossing\\Seacreatures.csv")
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library(knitr)
library(pander)
library(httr)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(DT)
library(stringr)
library(ggplot2)
library(rvest)
options(stringsAsFactors = FALSE)
jeopardy <- data.frame(read_csv("jeopardy.csv"))
# Print out rows and column names
head(jeopardy, n=5)
colnames(jeopardy)
# Clean column names
jeopardy_newcols <- colnames(jeopardy)
tolower(jeopardy_newcols)
names(jeopardy) <- jeopardy_newcols
# Remove "None" values from "Value" column
jeopardy_clean <- jeopardy %>%
filter(Value!="None")%>%
mutate(
value = str_replace_all(value, "[$,]", ""),
value = as.numeric(value)
)
# Remove "None" values from "Value" column
jeopardy_clean <- jeopardy %>%
filter(Value!="None")%>%
mutate(
Value = str_replace_all(value, "[$,]", ""),
Value = as.numeric(value)
)
# Remove "None" values from "Value" column
jeopardy_clean <- jeopardy %>%
filter(Value !="None")%>%
mutate(
Value = str_replace_all(value, "[$,]", ""),
Value = as.numeric(value)
)
View(jeopardy)
# Remove "None" values from "Value" column
jeopardy_clean <- jeopardy %>%
filter(value !="None")%>%
mutate(
value = str_replace_all(value, "[$,]", ""),
value = as.numeric(value)
)
jeopardy <- data.frame(read_csv("jeopardy.csv"))
# Print out rows and column names
head(jeopardy, n=5)
colnames(jeopardy)
# Clean column names
jeopardy_newcols <- colnames(jeopardy)
clean_names(jeopardy_newcols)
install.packages("janitor")
library(janitor)
jeopardy <- data.frame(read_csv("jeopardy.csv"))
# Print out rows and column names
head(jeopardy, n=5)
colnames(jeopardy)
# Clean column names
jeopardy_newcols <- colnames(jeopardy)
clean_names(jeopardy_newcols)
jeopardy <- data.frame(read_csv("jeopardy.csv"))
# Print out rows and column names
head(jeopardy, n=5)
colnames(jeopardy)
# Clean column names
jeopardy_newcols <- colnames(jeopardy)
make_clean_names(jeopardy_newcols)
names(jeopardy) <- jeopardy_newcols
jeopardy <- data.frame(read_csv("jeopardy.csv"))
# Print out rows and column names
head(jeopardy, n=5)
colnames(jeopardy)
# Clean column names
jeopardy_newcols <- colnames(jeopardy)
tolower(jeopardy_newcols)
names(jeopardy) <- jeopardy_newcols
jeopardy <- data.frame(read_csv("jeopardy.csv"))
# Print out rows and column names
head(jeopardy, n=5)
colnames(jeopardy)
# Clean column names
jeopardy_newcols <- colnames(jeopardy)
jeopardy_newcols <- tolower(jeopardy_newcols)
names(jeopardy) <- jeopardy_newcols
View(jeopardy)
# Remove "None" values from "Value" column
jeopardy_clean <- jeopardy %>%
filter(value !="None")%>%
mutate(
value = str_replace_all(value, "[$,]", ""),
value = as.numeric(value)
)
View(jeopardy_clean)
jeopardy_clean <- jeopardy_clean %>%
mutate(
question = tolower(question),
question = str_replace_all(question, "[^A-Za-z0-9]", ""),
answer = tolower(answer),
answer = str_replace_all(answer, "[^A-Za-z0-9 ]", ""),
category = tolower(category),
category = str_replace_all(category, "[^A-Za-z0-9 ]", "")
)
View(jeopardy_clean)
View(jeopardy_clean)
?separate
jeopardy_clean <- jeopardy_clean %>%
separate(., air_date, into = c("year", "month", "day"), sep = "-") %>%
mutate(
year= as.numeric(year),
month = as.numeric(month),
day = as.numeric(day)
)
jeopardy_clean <- jeopardy_clean %>%
separate(., air.date, into = c("year", "month", "day"), sep = "-") %>%
mutate(
year= as.numeric(year),
month = as.numeric(month),
day = as.numeric(day)
)
?pull
n_questions <- nrow(jeopardy)
p_category_expected <-   1/3369
p_not_category_expected <- 3368/3369
p_expected <- c(p_category_expected, p_not_category_expected)
categories <- pull(jeopardy_clean, category)
#Science count and chisq
n_science_categories = 0
for (c in categories) {
if ("science" %in% c) {
n_science_categories <- n_science_categories + 1
}
}
science_obs <- c(n_science_categories, n_question - n_science_categories)
n_questions <- nrow(jeopardy)
p_category_expected <-   1/3369
p_not_category_expected <- 3368/3369
p_expected <- c(p_category_expected, p_not_category_expected)
categories <- pull(jeopardy_clean, category)
#Science count and chisq
n_science_categories = 0
for (c in categories) {
if ("science" %in% c) {
n_science_categories <- n_science_categories + 1
}
}
science_obs <- c(n_science_categories, n_questions - n_science_categories)
p_expected <- (c1/336, 3368/3369)
n_questions <- nrow(jeopardy)
p_category_expected <-   1/3369
p_not_category_expected <- 3368/3369
p_expected <- c(p_category_expected, p_not_category_expected)
categories <- pull(jeopardy_clean, category)
#Science count and chisq
n_science_categories = 0
for (c in categories) {
if ("science" %in% c) {
n_science_categories <- n_science_categories + 1
}
}
science_obs <- c(n_science_categories, n_questions - n_science_categories)
p_expected <- c(1/3369, 3368/3369)
chisq.test(science_obs, p = p_expected)
n_questions <- nrow(jeopardy)
p_category_expected <-   1/3369
p_not_category_expected <- 3368/3369
p_expected <- c(p_category_expected, p_not_category_expected)
categories <- pull(jeopardy_clean, category)
#Science count and chisq
n_science_categories = 0
for (c in categories) {
if ("science" %in% c) {
n_science_categories <- n_science_categories + 1
}
}
science_obs <- c(n_science_categories, n_questions - n_science_categories)
p_expected <- c(1/3369, 3368/3369)
chisq.test(science_obs, p = p_expected)
#history count and chisq
n_history_categories = 0
for (c in categories) {
if ("history" %in% c) {
n_history_categories <- n_history_categories + 1
}
}
history_obs <- c(n_history_categories, n_questions - n_history_categories)
p_expected <- c(1/3369, 3368/3369)
chisq.test(history_obs, p = p_expected)
#Shakespeare count and chisq
n_shakespeare_categories = 0
for (c in categories) {
if ("shakespeare" %in% c) {
n_shakespeare_categories <- n_shakespeare_categories + 1
}
}
shakespeare_obs <- c(n_shakespeare_categories, n_questions - n_shakespeare_categories)
p_expected <- c(1/3369, 3368/3369)
chisq.test(shakespeare_obs, p = p_expected)
?str_split
#Pull questions
questions <- pull(jeopardy, question)
terms_used <- character(0)
for (q in questions) {
# Split the sentence into distinct words
split_sentence = str_split(q, " ")[[1]]
# Check if each word is longer than 6 and if currently in terms_used
for (term in split_sentence) {
if (!term %in% terms_used & nchar(term) >=6) {
terms_used=c(terms_used, term)
}
}
}
values <- pull(jeopardy, value)
values_count_data <- NULL
for (term in terms_used){
n_high_value = 0
n_low_value = 0
for (i in 1:length(questions)) {
# Split sentence into a new vector
split_sentence = str_split(questions[i], " ")[[1]]
# Detect if term is in the question and value status
if (term %in% split_sentence & values[i] >= 800) {
n_high_value = n_high_value + 1
} else if (term %in% split_sentence & values[i] < 800) {
n_low_value = n_low_value + 1
}
}
# Testing if the counts for high and low value questions deviates from expected
test = chisq.test(c(n_high_value, n_low_value), p = c(2/5,3/5))
new_row = c(term, n_high_value, n_low_value, test$p.value)
#append new row
value_count_data=rbind(value_count_data, new_row)
}
values <- pull(jeopardy, value)
values_count_data <- NULL
for (term in terms_used){
n_high_value = 0
n_low_value = 0
for (i in 1:length(questions)) {
# Split sentence into a new vector
split_sentence = str_split(questions[i], " ")[[1]]
# Detect if term is in the question and value status
if (term %in% split_sentence & values[i] >= 800) {
n_high_value = n_high_value + 1
} else if (term %in% split_sentence & values[i] < 800) {
n_low_value = n_low_value + 1
}
}
# Testing if the counts for high and low value questions deviates from expected
test = chisq.test(c(n_high_value, n_low_value), p = c(2/5,3/5))
new_row = c(term, n_high_value, n_low_value, test$p.value)
#append new row
values_count_data=rbind(value_count_data, new_row)
}
values <- pull(jeopardy, value)
values_count_data <- NULL
for (term in terms_used){
n_high_value = 0
n_low_value = 0
for (i in 1:length(questions)) {
# Split sentence into a new vector
split_sentence = str_split(questions[i], " ")[[1]]
# Detect if term is in the question and value status
if (term %in% split_sentence & values[i] >= 800) {
n_high_value = n_high_value + 1
} else if (term %in% split_sentence & values[i] < 800) {
n_low_value = n_low_value + 1
}
}
# Testing if the counts for high and low value questions deviates from expected
test = chisq.test(c(n_high_value, n_low_value), p = c(2/5,3/5))
new_row = c(term, n_high_value, n_low_value, test$p.value)
#append new row
values_count_data=rbind(values_count_data, new_row)
}
View(values_count_data)
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library(knitr)
library(pander)
library(httr)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(DT)
library(stringr)
library(ggplot2)
library(rvest)
options(stringsAsFactors = FALSE)
?filter
install.packages("broom")
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library(knitr)
library(pander)
library(httr)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(DT)
library(stringr)
library(ggplot2)
library(rvest)
library(broom)
options(stringsAsFactors = FALSE)
?mean
library(stringr)
?str_replace_all
update.packages()
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library(knitr)
library(knitr)
install.packages("Rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
library(knitr)
update.packages(xfun)
install.packages("xfun")
install.packages("xfun")
library(xfun)
