library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(DT)
library(stringr)
library(ggplot2)
library(rvest)
library(broom)
options(stringsAsFactors = FALSE)
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library(knitr)
library(pander)
library(httr)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(DT)
library(stringr)
library(ggplot2)
library(rvest)
library(broom)
options(stringsAsFactors = FALSE)
setwd("~/GitHub/DQ-Rpracticeproject/machine learning")
#Load data
NYC_property_sales <- suppressMessages(read_csv("NYC_property_sales.csv"))
#Load data
NYC_property_sales <- suppressMessages(read_csv("NYC_property_sales.csv"))
#building classifications
sort(table(NYC_property_sales$building_class_at_present))
NYC_condos <- NYC_property_sales %>%
filter(building_class_at_time_of_sale=="R4")
View(NYC_property_sales)
View(NYC_condos)
ggplot(data=NYC_condos,
aes(x=gross_square_feet, y=sale_price))+
geom_point(aes(color=borough), alpha=0.3)+
scale_y_continuous(labels=scales::comma, limits=c(0,75000000))+
xlim(0,10000)+
geom_smooth(method="lm", se=FALSE)+
labs(title="Condominium Sale Price Explained by Gross Square Feet",
x="Gross Square Feet (sqft)",
y="Sale Price($)")
ggplot(data=NYC_condos,
aes(x=gross_square_feet, y=sale_price))+
geom_point(aes(color=borough), alpha=0.3)+
scale_y_continuous(labels=scales::comma, limits=c(0,20000000))+
xlim(0,5000)+
geom_smooth(method="lm", se=FALSE)+
labs(title="Condominium Sale Price Explained by Gross Square Feet",
x="Gross Square Feet (sqft)",
y="Sale Price($)")
ggplot(data=NYC_condos,
aes(x=gross_square_feet, y=sale_price))+
geom_point(alpha=0.3)+
facet_wrap(~borough, scales="free", ncol=2)
scale_y_continuous(labels=scales::comma)+
geom_smooth(method="lm", se=FALSE)+
labs(title="Condominium Sale Price Explained by Gross Square Feet per Borough",
x="Gross Square Feet (sqft)",
y="Sale Price($)")
ggplot(data=NYC_condos,
aes(x=gross_square_feet, y=sale_price))+
geom_point(alpha=0.3)+
facet_wrap(~borough, scales="free", ncol=2)+
scale_y_continuous(labels=scales::comma)+
geom_smooth(method="lm", se=FALSE)+
labs(title="Condominium Sale Price Explained by Gross Square Feet per Borough",
x="Gross Square Feet (sqft)",
y="Sale Price($)")
#save original subsetted data
NYC_condos_original <- NYC_condos
#remove 165 East 66
NYC_condos <- NYC_condos %>%
filter(address != "165 East 66th St, Resi")
# Investigating multi unit
NYC_condos %>%
filter(sale_price==29620207 & sale_date="2019-04-08")
#save original subsetted data
NYC_condos_original <- NYC_condos
#remove 165 East 66
NYC_condos <- NYC_condos %>%
filter(address != "165 East 66th St, Resi")
# Investigating multi unit
NYC_condos %>%
filter(sale_price==29620207 & sale_date=="2019-04-08")
#save original subsetted data
NYC_condos_original <- NYC_condos
#remove 165 East 66
NYC_condos <- NYC_condos %>%
filter(address != "165 East 66th St, Resi")
# Investigating multi unit
Brooklyn_40 <- NYC_condos %>%
filter(borough=="Brooklyn" & sale_price==29620207 & sale_date=="2019-04-08")
View(Brooklyn_40)
?filter
#save original subsetted data
NYC_condos_original <- NYC_condos
#remove 165 East 66
NYC_condos <- NYC_condos %>%
filter(address != "165 East 66th St, Resi")
# Investigating multi unit
Brooklyn_40 <- NYC_condos %>%
filter(borough=="Brooklyn", sale_price==29620207 & sale_date=="2019-04-08")
#save original subsetted data
NYC_condos_original <- NYC_condos
#remove 165 East 66
NYC_condos <- NYC_condos %>%
filter(address != "165 East 66th St, Resi")
# Investigating multi unit
multi_unit_sales <- NYC_condos %>%
group_by(sale_price, sale_date) %>%
filter(n() >= 3) %>%
arrange(desc(sale_price))
View(multi_unit_sales)
View(multi_unit_sales)
#save original subsetted data
NYC_condos_original <- NYC_condos
#remove 165 East 66
NYC_condos <- NYC_condos %>%
filter(address != "165 East 66th St, Resi")
# Investigating multi unit sales
multi_unit_sales <- NYC_condos %>%
group_by(sale_price, sale_date) %>%
filter(n() >= 3) %>%
arrange(desc(sale_price))
# Removing multi unit sales
NYC_condos <- NYC_condos %>%
group_by(sale_price, sale_date) %>%
filter(n() <= 2) %>%
ungroup()
View(NYC_condos)
# Generate linear model of sale price explained by gross square feet
NYC_condos_lm <- lm(sale_price~gross_square_feet, data=NYC_condos)
# Generate linear model of sale price epxlained by gross square feet with original data
NYC_condos_original_lm <- lm(sale_price~gross_square_feet,data=NYC_condos_original)
# Generate linear model of sale price explained by gross square feet
NYC_condos_lm <- lm(sale_price~gross_square_feet, data=NYC_condos)
# Generate linear model of sale price epxlained by gross square feet with original data
NYC_condos_original_lm <- lm(sale_price~gross_square_feet,data=NYC_condos_original)
summary(NYC_condos_lm)
summary(NYC_condos_original_lm)
confint(NYC_condos_original)[2,]
confint(NYC_condos_original_lm)[2,]
confint(NYC_condos_lm)[2,]
# Generate linear model of sale price explained by gross square feet
NYC_condos_lm <- lm(sale_price~gross_square_feet, data=NYC_condos)
# Generate linear model of sale price epxlained by gross square feet with original data
NYC_condos_original_lm <- lm(sale_price~gross_square_feet,data=NYC_condos_original)
summary(NYC_condos_lm)
summary(NYC_condos_original_lm)
confint(NYC_condos_original_lm)[2,]
confint(NYC_condos_lm)[2,]
confint(NYC_condos_original_lm)
confint(NYC_condos_lm)
confint(NYC_condos_original_lm)[2,]
confint(NYC_condos_lm)[2,]
#Load data
NYC_property_sales <- suppressMessages(read_csv("NYC_property_sales.csv"))
#building classifications
sort(table(NYC_property_sales$building_class_at_present))
NYC_condos <- NYC_property_sales %>%
filter(building_class_at_time_of_sale=="R4")
ggplot(data=NYC_condos,
aes(x=gross_square_feet, y=sale_price))+
geom_point(aes(color=borough), alpha=0.3)+
scale_y_continuous(labels=scales::comma, limits=c(0,75000000))+
xlim(0,10000)+
geom_smooth(method="lm", se=FALSE)+
labs(title="Condominium Sale Price Explained by Gross Square Feet",
x="Gross Square Feet (sqft)",
y="Sale Price($)")
ggplot(data=NYC_condos,
aes(x=gross_square_feet, y=sale_price))+
geom_point(aes(color=borough), alpha=0.3)+
scale_y_continuous(labels=scales::comma, limits=c(0,20000000))+
xlim(0,5000)+
geom_smooth(method="lm", se=FALSE)+
labs(title="Condominium Sale Price Explained by Gross Square Feet",
x="Gross Square Feet (sqft)",
y="Sale Price($)")
ggplot(data=NYC_condos,
aes(x=gross_square_feet, y=sale_price))+
geom_point(alpha=0.3)+
facet_wrap(~borough, scales="free", ncol=2)+
scale_y_continuous(labels=scales::comma)+
geom_smooth(method="lm", se=FALSE)+
labs(title="Condominium Sale Price Explained by Gross Square Feet per Borough",
x="Gross Square Feet (sqft)",
y="Sale Price($)")
#save original subsetted data
NYC_condos_original <- NYC_condos
#remove 165 East 66
NYC_condos <- NYC_condos %>%
filter(address != "165 East 66th St, Resi")
# Investigating multi unit sales
multi_unit_sales <- NYC_condos %>%
group_by(sale_price, sale_date) %>%
filter(n() >= 3) %>%
arrange(desc(sale_price))
# Removing multi unit sales
NYC_condos <- NYC_condos %>%
group_by(sale_price, sale_date) %>%
filter(n() <= 2) %>%
ungroup()
# Generate linear model of sale price explained by gross square feet
NYC_condos_lm <- lm(sale_price~gross_square_feet, data=NYC_condos)
# Generate linear model of sale price epxlained by gross square feet with original data
NYC_condos_original_lm <- lm(sale_price~gross_square_feet,data=NYC_condos_original)
summary(NYC_condos_lm)
summary(NYC_condos_original_lm)
confint(NYC_condos_original_lm)[2,]
confint(NYC_condos_lm)[2,]
sigma(NYC_condos_original)
sigma(NYC_condos)
RSE_original <- sigma(NYC_condos_original)
RSE_clean <- sigma(NYC_condos)
sigma(NYC_condos_original_lm)
sigma(NYC_condos_lm)
ggplot(data=NYC_condos,
aes(x=gross_square_feet, y=sale_price))+
geom_point(alpha=0.3)+
facet_wrap(~borough, scales="free", ncol=2)+
scale_y_continuous(labels=scales::comma)+
geom_smooth(method="lm", se=FALSE)+
labs(title="Condominium Sale Price Explained by Gross Square Feet per Borough",
x="Gross Square Feet (sqft)",
y="Sale Price($)")
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
View(NYC_nested)
# Nest by borough
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
# Fit linear models to each borough individually
NYC_coefficients <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=lm(sale_price~gross_square_feet,
data=.)))
View(NYC_condos)
# Nest by borough
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
# Fit linear models to each borough individually
NYC_coefficients <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.)))
summary(NYC_coefficients$linear_model[[2]])
# Nest by borough
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
# Fit linear models to each borough individually
NYC_coefficients <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.)))
summary(NYC_coefficients$linear_model[[3]])
# Nest by borough
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
# Fit linear models to each borough individually
NYC_coefficients <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.)))
summary(NYC_coefficients$linear_model[[2]])
# Nest by borough
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
# Fit linear models to each borough individually
NYC_coefficients <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.)))
# Test
summary(NYC_coefficients$linear_model[[2]])
# Tidy with Confidence Intervals
NYC_tidy <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.))) %>%
mutate(tidy_coefficients=map(.x=linear_model,
.f=tidy,
conf.int=TRUE))
# Nest by borough
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
# Fit linear models to each borough individually
NYC_coefficients <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.)))
# Test
summary(NYC_coefficients$linear_model[[2]])
# Tidy with Confidence Intervals
NYC_tidy <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.))) %>%
mutate(tidy_coefficients=map(.x=linear_model,
.f=tidy,
conf.int=TRUE))
NYC_tidy$tidy_coefficients[[4]]
# Nest by borough
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
# Fit linear models to each borough individually
NYC_coefficients <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.)))
# Test
summary(NYC_coefficients$linear_model[[2]])
# Tidy with Confidence Intervals
NYC_tidy <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.))) %>%
mutate(tidy_coefficients=map(.x=linear_model,
.f=tidy,
conf.int=TRUE))
NYC_tidy$tidy_coefficients[[4]]
# Unnest to tidy dataframe
NYC_coefficients_tidy <- NYC_tidy %>%
select(borough, tidy_coefficients) %>%
unnest(cols=tidy_coefficient)
# Nest by borough
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
# Fit linear models to each borough individually
NYC_coefficients <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.)))
# Test
summary(NYC_coefficients$linear_model[[2]])
# Tidy with Confidence Intervals
NYC_tidy <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.))) %>%
mutate(tidy_coefficients=map(.x=linear_model,
.f=tidy,
conf.int=TRUE))
NYC_tidy$tidy_coefficients[[4]]
# Unnest to tidy dataframe
NYC_coefficients_tidy <- NYC_tidy %>%
select(borough, tidy_coefficients) %>%
unnest(cols=tidy_coefficients)
print(NYC_coefficients_tidy)
# Nest by borough
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
# Fit linear models to each borough individually
NYC_coefficients <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.)))
# Test
summary(NYC_coefficients$linear_model[[2]])
# Tidy with Confidence Intervals
NYC_tidy <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.))) %>%
mutate(tidy_coefficients=map(.x=linear_model,
.f=tidy,
conf.int=TRUE))
NYC_tidy$tidy_coefficients[[4]]
# Unnest to tidy dataframe
NYC_coefficients_tidy <- NYC_tidy %>%
select(borough, tidy_coefficients) %>%
unnest(cols=tidy_coefficients)
print(NYC_coefficients_tidy)
# Return slope estimate only
NYC_slope <- NYC_coefficients_tidy %>%
filter(term=="gross_square_feet") %>%
arrange(estimate)
# Nest by borough
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest()
# Fit linear models to each borough individually
NYC_coefficients <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.)))
# Test
summary(NYC_coefficients$linear_model[[2]])
# Tidy with Confidence Intervals
NYC_tidy <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.))) %>%
mutate(tidy_coefficients=map(.x=linear_model,
.f=tidy,
conf.int=TRUE))
NYC_tidy$tidy_coefficients[[4]]
# Unnest to tidy dataframe
NYC_coefficients_tidy <- NYC_tidy %>%
select(borough, tidy_coefficients) %>%
unnest(cols=tidy_coefficients)
print(NYC_coefficients_tidy)
# Return slope estimate only
NYC_slope <- NYC_coefficients_tidy %>%
filter(term=="gross_square_feet") %>%
arrange(estimate)
print(NYC_slope)
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.))) %>%
mutate(tidy_coefficients=map(.x=linear_model,
.f=tidy,
conf.int=TRUE)) %>%
mutate(tidy_summary_stats=map(.x=linear_model,
.f=glance))
NYC_summary_stats <- NYC_nested %>%
select(borough, tidy_summary_stats) %>%
unnested(cols=tidy_summary_stats)
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.))) %>%
mutate(tidy_coefficients=map(.x=linear_model,
.f=tidy,
conf.int=TRUE)) %>%
mutate(tidy_summary_stats=map(.x=linear_model,
.f=glance))
NYC_summary_stats <- NYC_nested %>%
select(borough, tidy_summary_stats) %>%
unnest(cols=tidy_summary_stats)
print(NYC_summary_stats)
NYC_nested <- NYC_condos %>%
group_by(borough) %>%
nest() %>%
mutate(linear_model=map(.x=data,
.f=~lm(sale_price~gross_square_feet,
data=.))) %>%
mutate(tidy_coefficients=map(.x=linear_model,
.f=tidy,
conf.int=TRUE)) %>%
mutate(tidy_summary_stats=map(.x=linear_model,
.f=glance))
NYC_summary_stats <- NYC_nested %>%
select(borough, tidy_summary_stats) %>%
unnest(cols=tidy_summary_stats)
print(NYC_summary_stats)
