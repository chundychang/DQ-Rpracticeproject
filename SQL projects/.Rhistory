plot_df <- forest_fires %>%
group_by(month) %>%
nest() %>%
mutate(plot = map2(month, summarize(total=n()), create_bar)) %>%
select(plot)
create_bar = function(x,y) {
ggplot(data=forest_fires)
aes(x=x, y=y) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"))
}
plot_df <- forest_fires %>%
group_by(month) %>%
nest() %>%
mutate(plot = map2(month, month=n(), create_bar)) %>%
select(plot)
?lapply
?map2
?nest
View(y_month)
?map2_dbl
create_bar = function(forestfire, time, total) {
ggplot(data=forestfire)
aes(x=time, y=total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"))
}
x_month = forest_fires_month[1]
y_month = forest_fires_month[2]
x_day = forest_fires_day[1]
y_day = forest_fires_day[2]
pmap(list(forest_fires_month, x_month, y_month), create_bar)
create_bar = function(forestfire, time, total) {
ggplot(data=forestfire)
aes(x=time, y=total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"))
}
x_month = forest_fires_month[1]
y_month = forest_fires_month[2]
x_day = forest_fires_day[1]
y_day = forest_fires_day[2]
pmap_dbl(list(forest_fires_month, x_month, y_month), create_bar)
create_bar = function(forestfire, time, total) {
ggplot(data=forestfire)
aes(x=time, y=total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"))
}
x_month = forest_fires_month[1]
y_month = forest_fires_month[2]
x_day = forest_fires_day[1]
y_day = forest_fires_day[2]
pmap_chr(list(forest_fires_month, x_month, y_month), create_bar)
create_bar = function(forestfire, time, total) {
ggplot(data=forestfire)
aes(x=time, y=total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"))
}
x_month = forest_fires_month$month
y_month = forest_fires_month$total
x_day = forest_fires_day$day
y_day = forest_fires_day$total
pmap_chr(list(forest_fires_month, x_month, y_month), create_bar)
forest_fires_month <- forest_fires %>%
group_by(month) %>%
nest()
summarize(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_day <- forest_fires %>%
group_by(day) %>%
summarize(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
nest(month, day)
summarize(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
nest(data = c(month, day)) %>%
summarize(total=n())
View(forest_fires_month)
View(forest_fires_month)
forest_fires_month <- forest_fires %>%
group_by(month) %>%
nest() %>%
summarize(total=n())
View(forest_fires_month)
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize_at(c("month", "day"), total=n())
View(forest_fires)
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize_all(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize_all(n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize_all(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
dplyr::summarize_all(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
dplyr::summarise_all(total=n())
forest_fires_month <- forest_fires %>%
dplyr::group_by(month) %>%
dplyr::summarize_all(total=n())
library(plyr)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tibble)
library(DT)
library(stringr)
library(lubridate)
library(ggplot2)
options(stringsAsFactors = FALSE)
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize_all(total=n())
forest_fires_month <- forest_fires %>%
dplyr::group_by(month) %>%
dplyr::summarize_all(total=n())
forest_fires_month <- forest_fires %>%
group_by(month, day) %>%
summarize(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tibble)
library(DT)
library(stringr)
library(lubridate)
library(ggplot2)
options(stringsAsFactors = FALSE)
forest_fires <- data.frame(read.csv("forestfires.csv"))
dim(forest_fires)
colnames(forest_fires)
for (i in colnames(forest_fires)) {
print(class(forest_fires[[i]]))
}
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_day <- forest_fires %>%
group_by(day) %>%
summarize(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize_all(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_month <- forest_fires %>%
group_by(month, day) %>%
summarize(total=n())
View(forest_fires_month)
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n()) %>%
ungroup() %>%
group_by(day) %>%
summarize(total=n())
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_day <- forest_fires %>%
group_by(day) %>%
summarize(total=n())
View(forest_fires_month)
ggplot(data=forest_fires_month)
aes(x=month, y=total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"))
View(forest_fires_month)
ggplot(data=forest_fires_month)
aes(x=month, y=total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"))
forest_fires <- data.frame(read.csv("forestfires.csv"))
dim(forest_fires)
colnames(forest_fires)
for (i in colnames(forest_fires)) {
print(class(forest_fires[[i]]))
}
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_day <- forest_fires %>%
group_by(day) %>%
summarize(total=n())
ggplot(data=forest_fires_month)
aes(x=month, y=total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"))
ggplot(data=forest_fires_month)
aes(x=month, y=total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tibble)
library(DT)
library(stringr)
library(lubridate)
library(ggplot2)
options(stringsAsFactors = FALSE)
forest_fires <- data.frame(read.csv("forestfires.csv"))
dim(forest_fires)
colnames(forest_fires)
for (i in colnames(forest_fires)) {
print(class(forest_fires[[i]]))
}
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_day <- forest_fires %>%
group_by(day) %>%
summarize(total=n())
ggplot(data=forest_fires_month)
aes(x=month, y=total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
ggplot(data=forest_fires_month)
aes(x = month, y = total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
month_graph <- ggplot(data=forest_fires_month)
aes(x = month, y = total) +
geom_bar(stat='identity') +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
print(month_graph)
ggplot(data=forest_fires_month)
aes(x = month, y = total) +
geom_bar(stat="identity") +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
dev.new()
ggplot(data=forest_fires_month)
aes(x = month, y = total) +
geom_bar(stat="identity") +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
ggplot(data=forest_fires_month)
aes(x = month, y = total) +
geom_bar(stat="identity") +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
map_graph <- ggplot(data=forest_fires_month)
aes(x = month, y = total) +
geom_bar(stat="identity") +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
print(map_graph)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tibble)
library(DT)
library(stringr)
library(lubridate)
library(ggplot2)
options(stringsAsFactors = FALSE)
forest_fires <- data.frame(read.csv("forestfires.csv"))
dim(forest_fires)
colnames(forest_fires)
for (i in colnames(forest_fires)) {
print(class(forest_fires[[i]]))
}
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_day <- forest_fires %>%
group_by(day) %>%
summarize(total=n())
ggplot(data=forest_fires_month)
aes(x = month, y = total) +
geom_bar(stat="identity") +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tibble)
library(DT)
library(stringr)
library(lubridate)
library(ggplot2)
options(stringsAsFactors = FALSE)
dev.off
forest_fires <- data.frame(read.csv("forestfires.csv"))
dim(forest_fires)
colnames(forest_fires)
for (i in colnames(forest_fires)) {
print(class(forest_fires[[i]]))
}
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_day <- forest_fires %>%
group_by(day) %>%
summarize(total=n())
ggplot(data=forest_fires_month)
aes(x = month, y = total) +
geom_bar(stat="identity") +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tibble)
library(DT)
library(stringr)
library(lubridate)
library(ggplot2)
options(stringsAsFactors = FALSE)
forest_fires <- data.frame(read.csv("forestfires.csv"))
dim(forest_fires)
colnames(forest_fires)
for (i in colnames(forest_fires)) {
print(class(forest_fires[[i]]))
}
forest_fires_month <- forest_fires %>%
group_by(month) %>%
summarize(total=n())
forest_fires_day <- forest_fires %>%
group_by(day) %>%
summarize(total=n())
ggplot(data=forest_fires_month)
aes(x = month, y = total) +
geom_bar(stat="identity") +
theme(panel.background=element_rect(fill="white"), axis.line = element_line(size=0.25, colour = "black"))
installr: install.packages("installr") and library(installr)
updateR()
library(installR)
install.packages("installr")
library(installr)
updateR()
install.packages("jsonlite")
install.packages("rtools")
?row_number
?group_by
?row_number
?select
?tibble
?str
install.packages("RSQLite")
install.packages("DBI")
setwd("~/GitHub/DQ-Rpracticeproject/SQL projects")
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
db <- 'chinook.db'
run_query <- function(q) {
conn <- dbConnect(SQLite(), db)
result <- dbGetQuery(conn, q)
dbDisconnect(conn)
return(result)
}
show_tables <- function() {
q = "SELECT name, type FROM sqlite_master WHERE type IN ('table', 'view')"
return(run_query(q))
}
show_tables()
library(knitr)
library(RSQLite)
library(DBI)
library(pander)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(DT)
library(stringr)
library(ggplot2)
options(stringsAsFactors = FALSE)
db <- 'chinook.db'
run_query <- function(q) {
conn <- dbConnect(SQLite(), db)
result <- dbGetQuery(conn, q)
dbDisconnect(conn)
return(result)
}
show_tables <- function() {
q = "SELECT name, type FROM sqlite_master WHERE type IN ('table', 'view')"
return(run_query(q))
}
show_tables()
albums_to_purchase = '
WITH usa_tracks_sold AS
(
SELECT il.* FROM invoice_line il
INNER JOIN invoice i on il.invoice_id = i.invoice_id
INNER JOIN customer c on i.customer_id = c.customer_id
WHERE c.country = "USA"
)
SELECT
g.name genre,
count(uts.invoice_line_id) tracks_sold,
cast(count(uts.invoice_line_id) AS FLOAT) / (
SELECT COUNT(*) from usa_tracks_sold
) percentage_sold
FROM usa_tracks_sold uts
INNER JOIN track t on t.track_id = uts.track_id
INNER JOIN genre g on g.genre_id = t.genre_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10;
'
run_query(albums_to_purchase)
run_query <- function(q) {
conn <- dbConnect(SQLite(), 'chinook.db')
result <- dbGetQuery(conn, q)
dbDisconnect(conn)
return(result)
}
show_tables <- function() {
q = "SELECT name, type FROM sqlite_master WHERE type IN ('table', 'view')"
return(run_query(q))
}
show_tables()
albums_to_purchase = '
WITH usa_tracks_sold AS
(
SELECT il.* FROM invoice_line il
INNER JOIN invoice i on il.invoice_id = i.invoice_id
INNER JOIN customer c on i.customer_id = c.customer_id
WHERE c.country = "USA"
)
SELECT
g.name genre,
count(uts.invoice_line_id) tracks_sold,
cast(count(uts.invoice_line_id) AS FLOAT) / (
SELECT COUNT(*) from usa_tracks_sold
) percentage_sold
FROM usa_tracks_sold uts
INNER JOIN track t on t.track_id = uts.track_id
INNER JOIN genre g on g.genre_id = t.genre_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10;
'
run_query(albums_to_purchase)
run_query <- function(q) {
conn <- dbConnect(SQLite(), 'chinook.db')
result <- dbGetQuery(conn, q)
dbDisconnect(conn)
return(result)
}
show_tables <- function() {
q = "SELECT name, type FROM sqlite_master WHERE type IN ('table', 'view')"
return(run_query(q))
}
show_tables()
